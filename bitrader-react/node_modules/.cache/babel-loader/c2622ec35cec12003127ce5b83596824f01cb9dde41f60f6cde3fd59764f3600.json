{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\n\n// Import required CSS directly for the app\nimport '../App.css';\n\n// This component ensures CSS is loaded in the right order\nconst CssLoader = () => {\n  _s();\n  useEffect(() => {\n    // Function to load CSS files from public directory with better error handling\n    const loadCssFile = (href, id) => {\n      if (document.getElementById(id)) return; // Already loaded\n\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = href;\n      link.id = id;\n\n      // Add error handling for missing files\n      link.onerror = () => {\n        console.warn(`CSS file not found: ${href}`);\n        link.remove(); // Remove the broken link element\n      };\n      document.head.appendChild(link);\n    };\n\n    // Basic styles that should always be available\n    loadCssFile('/css/bootstrap.min.css', 'bootstrap-css');\n\n    // Conditionally load theme CSS files - they may not exist\n    loadCssFile('/css/bitrader-core.css', 'bitrader-core-css');\n    loadCssFile('/css/bitrader-custom.css', 'bitrader-custom-css');\n    loadCssFile('/css/aos.css', 'aos-css');\n\n    // Initialize theme mode from localStorage if available\n    const storedTheme = localStorage.getItem('theme-mode');\n    if (storedTheme === 'dark') {\n      document.body.classList.add('dark-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n    }\n\n    // Add any additional initialization needed for other scripts\n    // For example, initializing AOS (Animate On Scroll) if used\n    if (typeof window.AOS !== 'undefined') {\n      window.AOS.init();\n    }\n\n    // Clean up on unmount\n    return () => {\n      // Optional: Remove CSS when component unmounts\n      // const core = document.getElementById('bitrader-core-css');\n      // if (core) core.remove();\n    };\n  }, []);\n  return null; // This component doesn't render anything\n};\n_s(CssLoader, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = CssLoader;\nexport default CssLoader;\nvar _c;\n$RefreshReg$(_c, \"CssLoader\");","map":{"version":3,"names":["React","useEffect","CssLoader","_s","loadCssFile","href","id","document","getElementById","link","createElement","rel","type","onerror","console","warn","remove","head","appendChild","storedTheme","localStorage","getItem","body","classList","add","window","AOS","init","_c","$RefreshReg$"],"sources":["C:/Users/LUPA/3D Objects/bitrader-react/src/components/CssLoader.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\n\r\n// Import required CSS directly for the app\r\nimport '../App.css';\r\n\r\n// This component ensures CSS is loaded in the right order\r\nconst CssLoader = () => {\r\n  useEffect(() => {\r\n    // Function to load CSS files from public directory with better error handling\r\n    const loadCssFile = (href, id) => {\r\n      if (document.getElementById(id)) return; // Already loaded\r\n      \r\n      const link = document.createElement('link');\r\n      link.rel = 'stylesheet';\r\n      link.type = 'text/css';\r\n      link.href = href;\r\n      link.id = id;\r\n      \r\n      // Add error handling for missing files\r\n      link.onerror = () => {\r\n        console.warn(`CSS file not found: ${href}`);\r\n        link.remove(); // Remove the broken link element\r\n      };\r\n      \r\n      document.head.appendChild(link);\r\n    };\r\n    \r\n    // Basic styles that should always be available\r\n    loadCssFile('/css/bootstrap.min.css', 'bootstrap-css');\r\n    \r\n    // Conditionally load theme CSS files - they may not exist\r\n    loadCssFile('/css/bitrader-core.css', 'bitrader-core-css');\r\n    loadCssFile('/css/bitrader-custom.css', 'bitrader-custom-css');\r\n    loadCssFile('/css/aos.css', 'aos-css');\r\n    \r\n    // Initialize theme mode from localStorage if available\r\n    const storedTheme = localStorage.getItem('theme-mode');\r\n    if (storedTheme === 'dark') {\r\n      document.body.classList.add('dark-mode');\r\n    } else {\r\n      document.body.classList.remove('dark-mode');\r\n    }\r\n\r\n    // Add any additional initialization needed for other scripts\r\n    // For example, initializing AOS (Animate On Scroll) if used\r\n    if (typeof window.AOS !== 'undefined') {\r\n      window.AOS.init();\r\n    }\r\n    \r\n    // Clean up on unmount\r\n    return () => {\r\n      // Optional: Remove CSS when component unmounts\r\n      // const core = document.getElementById('bitrader-core-css');\r\n      // if (core) core.remove();\r\n    };\r\n  }, []);\r\n\r\n  return null; // This component doesn't render anything\r\n};\r\n\r\nexport default CssLoader; "],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;;AAExC;AACA,OAAO,YAAY;;AAEnB;AACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtBF,SAAS,CAAC,MAAM;IACd;IACA,MAAMG,WAAW,GAAGA,CAACC,IAAI,EAAEC,EAAE,KAAK;MAChC,IAAIC,QAAQ,CAACC,cAAc,CAACF,EAAE,CAAC,EAAE,OAAO,CAAC;;MAEzC,MAAMG,IAAI,GAAGF,QAAQ,CAACG,aAAa,CAAC,MAAM,CAAC;MAC3CD,IAAI,CAACE,GAAG,GAAG,YAAY;MACvBF,IAAI,CAACG,IAAI,GAAG,UAAU;MACtBH,IAAI,CAACJ,IAAI,GAAGA,IAAI;MAChBI,IAAI,CAACH,EAAE,GAAGA,EAAE;;MAEZ;MACAG,IAAI,CAACI,OAAO,GAAG,MAAM;QACnBC,OAAO,CAACC,IAAI,CAAC,uBAAuBV,IAAI,EAAE,CAAC;QAC3CI,IAAI,CAACO,MAAM,CAAC,CAAC,CAAC,CAAC;MACjB,CAAC;MAEDT,QAAQ,CAACU,IAAI,CAACC,WAAW,CAACT,IAAI,CAAC;IACjC,CAAC;;IAED;IACAL,WAAW,CAAC,wBAAwB,EAAE,eAAe,CAAC;;IAEtD;IACAA,WAAW,CAAC,wBAAwB,EAAE,mBAAmB,CAAC;IAC1DA,WAAW,CAAC,0BAA0B,EAAE,qBAAqB,CAAC;IAC9DA,WAAW,CAAC,cAAc,EAAE,SAAS,CAAC;;IAEtC;IACA,MAAMe,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACtD,IAAIF,WAAW,KAAK,MAAM,EAAE;MAC1BZ,QAAQ,CAACe,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;IAC1C,CAAC,MAAM;MACLjB,QAAQ,CAACe,IAAI,CAACC,SAAS,CAACP,MAAM,CAAC,WAAW,CAAC;IAC7C;;IAEA;IACA;IACA,IAAI,OAAOS,MAAM,CAACC,GAAG,KAAK,WAAW,EAAE;MACrCD,MAAM,CAACC,GAAG,CAACC,IAAI,CAAC,CAAC;IACnB;;IAEA;IACA,OAAO,MAAM;MACX;MACA;MACA;IAAA,CACD;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,IAAI,CAAC,CAAC;AACf,CAAC;AAACxB,EAAA,CApDID,SAAS;AAAA0B,EAAA,GAAT1B,SAAS;AAsDf,eAAeA,SAAS;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}