I have an HTML section or full page that I want to convert into a clean, production-ready React component that is also dynamic-prop ready and pixel-perfect compared to the original design.Please follow these strict instructions:1. Code StyleUse React functional components (no class components).Use arrow functions if possible.Do NOT wrap with <html>, <head>, or <body> — only output JSX.Ensure well-indented, clean code with no unnecessary spaces.2. Class HandlingConvert all class attributes to className exactly as they appear.Preserve all original class names and structure — do not rename or refactor unless absolutely necessary.3. CSS HandlingDo NOT use inline styles, unless they were already present in the HTML.Assume all external/global CSS has been already imported in App.jsx or index.js globally.Do NOT re-import any CSS files inside the component.Self-close tags properly (<img />, <input />, <br />, etc.).4. Dynamic Props PreparationIdentify all hardcoded text, images, links, button labels, and repeatable content.Replace them with dynamic prop placeholders using {} syntax.Example:jsxCopyEdit<h2>{title}</h2><p>{description}</p><img src={imageSrc} alt={altText} /><a href={buttonLink}>{buttonLabel}</a>Set default values for props using:default parameters, ORfallback values inside the JSX directly.Example:jsxCopyEditconst ComponentName = ({ title = "Default Title", imageSrc = "/default.jpg" }) => ( ... )5. Structure PreservationCarefully preserve parent-child structure exactly as in the HTML.Include important parent wrapper divs even if they seem redundant.Example: .main-wrapper, .content-area, .theme-light, etc.6. CSS Variables WarningIf the HTML section or page uses var(--some-variable):Mention clearly that the corresponding CSS variables must be defined inside the React project's global CSS (index.css or similar).Example for the user:cssCopyEdit:root {  --primary-color: #1D4ED8;  --secondary-color: #64748b;}7. CSS Specificity CautionBe careful about CSS specificity:If the original style depended on a parent selector (e.g., .dark-mode .section-title), maintain the same wrapper hierarchy.Otherwise, styling might not apply properly.8. Optional ComponentizationIf you detect repeated structures (cards, teams, testimonials, blogs):Suggest splitting them into separate subcomponents that also accept props.Example: <TeamMemberCard />, <ServiceBox />, etc    9. Font and Asset Management:Make sure any external fonts (Google Fonts, custom fonts) used in the original HTML are imported globally for accurate typography.Correct asset paths when necessary. Assets should preferably be under /public for direct linking (e.g., /images/pic.jpg).10  Responsive Layout Preservation:Maintain all responsive classes and structures exactly as they appear in HTML.If media queries depend on parent classes or breakpoints, ensure parent containers are present.11. Animation Awareness:If the original section uses scroll animations, hover animations, or third-party JavaScript animation libraries, mention what scripts need reinstallation or manual React re-implementation.12. Notes SectionAfter the code, under a "Notes" heading, provide:A short summary of:What props were createdWhat default values were setIf any missing CSS variables are neededIf any manual fixes are needed (e.g., asset paths, scripts)Suggest anything else important for the user to keep the component pixel-perfect.